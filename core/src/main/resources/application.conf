  env: "test"
  env: ${?ENV}
  region: "eu-central-1"
  region: ${?REGION}
  execution_env: ""
  execution_env: ${?EXECUTION_ENV}
  s3_endpoint: ""
  s3_endpoint: ${?S3_ENDPOINT}
  fabric_warehouse: "alefwarehouse"

  delta.snapshot.partitions: 1
  delta.snapshot.partitions: ${?SNAPSHOT_PARTITIONS}
  spark.shuffle.partitions: 1
  spark.shuffle.partitions: ${?SHUFFLE_PARTITIONS}

  s3: {
    bucket: "alef-bigdatadata-emr"
    bucket: ${?S3_BUCKET}
    root: "alef-data-platform"
    root: ${?S3_PATH}
    delta.root: "lakehouse"
    delta.root: ${?S3_DELTA_PATH}
    datalake: "datalake"
    path: "s3a://"${s3.bucket}"/"${s3.root}""
    delta.path: "s3a://"${s3.bucket}"/"${s3.delta.root}""
    coalesce: 1
    coalesce: ${?COALESCE_NUMBER}
    delta.enable: false
    delta.enable: ${?DELTA_ENABLED}
  }

  adls: {
    stgacc: "alefdatapoc"
    stgacc: ${?S3_BUCKET}
    container: "alef-big-data-emr"
    container: ${?S3_PATH}
    root: "alef-data-platform"
    root: ${?S3_PATH}
    delta.root: "lakehouse"
    delta.root: ${?S3_DELTA_PATH}
    datalake: "datalake"
    path: "abfss://"${adls.container}"@"${adls.stgacc}".dfs.core.windows.net/"${adls.root}""
    delta.path: "abfss://"${adls.stgacc}"/"${adls.delta.root}""
    coalesce: 1
    coalesce: ${?COALESCE_NUMBER}
    delta.enable: false
    delta.enable: ${?DELTA_ENABLED}
  }

  kafka: {
    "format": "org.apache.spark.sql.kafka010.KafkaSourceProvider"
    "kafka.bootstrap.servers": ${?KAFKA_BROKERS}
    "startingoffsets": "earliest"
    "failOnDataLoss": "false"
    "kafka.security.protocol": "SSL"
    "kafka.security.protocol": ${?PROTOCOL}
    "kafka.ssl.protocol": "TLS"
    "kafka.ssl.keystore.type": "PKCS12"
    "kafka.ssl.truststore.type": "JKS"
    "pass": ""
    "pass": ${?KAFKA_PASS_KEY}
    "truststore": ${?KAFKA_TRUSTSTORE_KEY}
    "keystore": ${?KAFKA_KEYSTORE_KEY}
    "certs.loc": ${?KAFKA_CERTS_LOC}
    "includeHeaders": "true"
  }

  parquet: {
    "format": "org.apache.spark.sql.parquet"
    "outputMode": "append"
    "path": ${s3.path}"/"${?ENV}"/data/"
    "trigger": ${?TRIGGER_TIME}
  }

  csv: {
    "format": "com.databricks.spark.csv"
    "mode": "FAILFAST"
    "inferSchema": true
    "ignoreTrailingWhiteSpace": true
    "ignoreLeadingWhiteSpace": true
    "header": true
    "path": ${s3.path}"/"${?ENV}"/data/"
  }

  json: {
    "format": "org.apache.spark.sql.json"
    "outputMode": "append"
    "path": ${s3.path}"/"${?ENV}"/data/"
  }

  text: {
    "format": "text"
    "outputMode": "append"
    "path": ${s3.path}"/"${?ENV}"/data/"
    "trigger": ${?TRIGGER_TIME}
  }

  delta: {
    "format": "delta"
    "outputMode": "append",
    "mergeSchema": true,
    "path": ${s3.delta.path}"/"${?ENV}"/data/"
  }

  internal: {
    batch.products.table: "`"${?ENV}"`._internal.batch_products"
    batch.execution.log.table: "`"${?ENV}"`._internal.batch_execution_log"
  }

  redshift: {
    "format": "io.github.spark_redshift_community.spark.redshift"
    "mode": "append"
    "urlkey": ""
    "urlkey": ${?REDSHIFT_URL_KEY}
    "forward_spark_s3_credentials": "true"
    "tempdir": "s3a://"${?S3_BUCKET}"/temp_redshift"
    "tempdir_region": ${?REGION}
    "secret.region": ${?REGION}
    "inferSchema": true
    "extracopyoptions": "ACCEPTINVCHARS"
    "autoenablessl": false
    "database": ${?REDSHIFT_DATABASE}
    "sqlexceptiontimeout": 15
    "sqlexceptionattempts": 3
  }

  fabric: {
    "format": "jdbc"
    "mode": "append"
    "driver": "com.microsoft.sqlserver.jdbc.SQLServerDriver"
  }

  metrics: {
    enable: false
    enable: ${?ENABLE_METRICS}
  }

  serviceDeskSecretName: ${?SERVICE_DESK_SECRET_NAME}
  jiraSecretName: ${?JIRA_SECRET_NAME}

  toggle: {
    pathway.content.repo.iwh = true
    pathway.content.repo.iwh = ${?ALEF_39389_PATHWAY_CONTENT_REPO_IWH_TOGGLE}
  }

  launch_darkly: {
    sdk.key = ""
    sdk.key = ${?LAUNCH_DARKLY_SDK_KEY}
  }

  delta-data-offset = ${s3.delta.path}"/internal/data-offset"
