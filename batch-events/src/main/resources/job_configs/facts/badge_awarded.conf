 parquet-badge-awarded-source = ${parquet-source} {"path": ${s3.path}"/"${env}"/processing/alef-badge-awarded"}
  parquet-badge-awarded-sink = ${parquet-source} {"path": ${s3.path}"/"${env}"/data/alef-badge-awarded"}
  badge-awarded-transformed-sink = ${parquet-source-overwrite} {"path": ${s3.path}"/"${env}"/transformed/alef-badge-awarded"}
  badge-awarded-transformed-source = ${parquet-source} {"path": ${s3.path}"/"${env}"/transformed/alef-badge-awarded"}
  delta-badge-awarded-sink = ${delta-sink} {"path" = ${s3.delta.path}"/"${env}"/alef-badge-awarded"}
  redshift-badge-awarded-sink = ${redshift} {"dbtable": ${redshift-staging-schema}".staging_badge_awarded"}

  badge-awarded-parquet {
    source: [
        "parquet-badge-awarded-source"
    ]
    sink: [
        "parquet-badge-awarded-sink"
    ]
  }

  transform-badge-awarded {
    source: [
        "parquet-badge-awarded-source"
    ]
    sink: [
        "badge-awarded-transformed-sink"
    ]
  }

  delta-badge-awarded {
    source: [
        "badge-awarded-transformed-source"
    ]
    sink: [
        "delta-badge-awarded-sink"
    ]
    entity-prefix: "fba"
    # use match-conditions to handle NULL value cases, for delta uses <=>
    match-conditions: """delta.fba_id <=> events.fba_id"""
  }

  redshift-badge-awarded {
    source: [
        "badge-awarded-transformed-source"
    ]
    sink: [
        "redshift-badge-awarded-sink"
    ]
    entity-prefix: "fba"
    is-staging: true
    table-name: "staging_badge_awarded"
    exclude-columns: ["eventdate"]
    # use match-conditions to handle NULL value cases, for redshift uses NVL
    match-conditions: """NVL(fba_id, '') = NVL(t.fba_id, '')"""
  }
