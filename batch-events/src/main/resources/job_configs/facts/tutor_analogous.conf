parquet-tutor-analogous-source = ${parquet-source} {"path": ${s3.path}"/"${env}"/processing/alef-tutor-analogous"}
parquet-tutor-analogous-sink = ${parquet-source} {"path": ${s3.path}"/"${env}"/data/alef-tutor-analogous"}
transformed-tutor-analogous = ${parquet-source-overwrite} {"path": ${s3.path}"/"${env}"/transformed/alef-tutor-analogous"}
redshift-tutor-analogous-sink = ${redshift} {"dbtable": ${redshift-staging-schema}".staging_tutor_analogous"}
delta-tutor-analogous-sink = ${delta-sink} {"path" = ${s3.delta.path}"/"${env}"/alef-tutor-analogous"}
parquet-tutor-analogous {
    source: [
        "parquet-tutor-analogous-source"
    ]
    sink: [
        "parquet-tutor-analogous-sink"
    ]
}


redshift-tutor-analogous {
    sources: [
        "transformed-tutor-analogous",
    ]
    sink: [
        "redshift-tutor-analogous-sink"
    ]
}

delta-tutor-analogous {
    sources: [
            "transformed-tutor-analogous",
        ]
    sink: [
        "delta-tutor-analogous-sink"
    ]
}

tutor-analogous-transform {
    key: "fact_tutor_analogous "
    source: "parquet-tutor-analogous-source"
    entity: "fta"
    column-mapping: {
        userId : "fta_user_id",
        tenantId : "fta_tenant_id",
        messageId : "fta_message_id",
        sessionId : "fta_session_id",
        conversationId : "fta_conversation_id",
        userInterest: "fta_user_interest",
        analogous : "fta_analogous",
        occurredOn: "occurredOn"
    }
    sink: "transformed-tutor-analogous"
}