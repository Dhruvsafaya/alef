# adt_attempt_threshold_settings.conf

parquet-adt-attempt-threshold-mutated-source = ${parquet-source} {"path": ${s3.path}"/"${env}"/processing/alef-adt-attempt-threshold-mutated"}
parquet-adt-attempt-threshold-mutated-sink = ${parquet-source} {"path": ${s3.path}"/"${env}"/data/alef-adt-attempt-threshold-mutated"}
transformed-adt-attempt-threshold-mutated-source = ${parquet-source} {"path": ${s3.path}"/"${env}"/transformed/alef-adt-attempt-threshold-mutated"}
transformed-adt-attempt-threshold-mutated-sink = ${parquet-source-overwrite} {"path": ${s3.path}"/"${env}"/transformed/alef-adt-attempt-threshold-mutated"}
delta-adt-attempt-threshold-sink = ${delta-sink} {"path" = ${s3.delta.path}"/"${env}"/alef-adt-attempt-threshold"}
redshift-adt-attempt-threshold-sink = ${redshift} {"dbtable": ${redshift-staging-schema}".staging_adt_attempt_threshold"}

parquet-adt-attempt-threshold {
    source: [
      "parquet-adt-attempt-threshold-mutated-source"
    ],
    sink: [
      "parquet-adt-attempt-threshold-mutated-sink"
    ]
}

delta-adt-attempt-threshold {
    source: "transformed-adt-attempt-threshold-mutated-source",
    sink: [
      "delta-adt-attempt-threshold-sink"
    ],
    unique-ids: ["aat_id", "aat_attempt_number"],
    match-conditions: "delta.aat_id = events.aat_id and delta.aat_attempt_number = events.aat_attempt_number"
    inactive_status_value: 2
}

redshift-adt-attempt-threshold {
    source: "transformed-adt-attempt-threshold-mutated-source",
    sink: [
      "redshift-adt-attempt-threshold-sink"
    ],
    unique-ids: ["aat_id", "aat_attempt_number"],
    inactive_status_value: 2,
    is_staging_sink: true
}

adt-attempt-threshold-mutated-transform {
      attach-source: [],
      updated-source: [
        "parquet-adt-attempt-threshold-mutated-source"
      ],
      detach-source: [],
      sink: [
          "transformed-adt-attempt-threshold-mutated-sink"
      ]
      key: "dim_adt_attempt_threshold"
      attach-event-names: ["AttemptThresholdCreated", "AttemptThresholdUpdated"]
      detach-event-name: []
      entity-prefix: "aat"
      attachColsMap: {
                            eventType: "eventType",
                            id: "id",
                            tenantId: "tenantId",
                            academicYearId: "academicYearId",
                            schoolId: "schoolId",
                            attempts.startTime: "startTime",
                            attempts.endTime: "endTime",
                            attempts.attemptNumber: "attemptNumber",
                            attempts.attemptTitle: "attemptTitle",
                            numberOfAttempts: "numberOfAttempts",
                            status: "status",
                            occurredOn : "occurredOn"
      }
      detachColsMap: {}
      colsMap: {
                             id: "aat_id",
                             tenantId: "aat_tenant_id",
                             academicYearId: "aat_academic_year_id",
                             schoolId: "aat_school_id",
                             startTime: "aat_attempt_start_time",
                             endTime: "aat_attempt_end_time",
                             attemptNumber: "aat_attempt_number",
                             attemptTitle: "aat_attempt_title",
                             numberOfAttempts: "aat_total_attempts",
                             status: "aat_state",
                             aat_status : "aat_status",
                             occurredOn : "occurredOn"
                }
      colToTransform: {}
      longToTimeCols: [startTime, endTime]
      colToExplode: ["attempts"]
      autoGenerateDwId: true
      inactiveStatus: 2
      groupKeys: ["id", "attemptNumber"]
}
